---

    //COMPONENTE QUE VA A TENER:

    interface Props{
        id: string
        details: string | null
        img: string
        success: boolean
        flightNumber: number
    }

    const {success, flightNumber, img, id, details} = Astro.props

    /**
     * podemos hacer una condicion para hacer una renderisacion 
     * condicional.
     */
    const launchesStatus = success ? "Exito" : "Fracaso"
---

<a 
    href={`/launch/${id}`}
    class="rounded-lg border shadow-md bg-gray-800 border-gray-700
    hover:scale-105 hover:bg-gray-700 hover:border-gray-500 transition flex
    flex-col"

>

<picture class="flex justify-center p-4">
    <img class="mb-5 rounded-lg" src={img} alt={`Patch for launch ${id}`}>
</picture>

<header class="p-4 flex-grow">
    <!-- <span
        class={`text-xs font-semibold mr-2 px-2.5 py-0.5 rounded ${
            success ? "bg-green-200 text-green-900" : "bg-red-200 text-red-90"
        }`}>{successText}</span>-->
    <span 
        class:list={[
            //aqui le pasamos los parametros que si o si se van a ocupar:
            "text-xs font-semibold mr-2 px-2.5 py-0.5 rounded",
            //tambien se pueden pasar objetos: opcion1: class={`${success ? "bg-green-400 text-green-900" : "bg-red-400 text-red-900"}
            {
                "bg-green-400 text-green-900": success,
                "bg-red-400 text-red-900": !success,
            },
        ]}>{launchesStatus}</span>
    <!-- Esta es una opcion de como mostrar exito o fallido -->


    <h2 class="my-2 text-2x1 font-bold tracking-tight text-white">
        Flight # {flightNumber}
    </h2>

    <p class="mb-4 font-light text-gray-400">
        {
            details != null && details?.length > 100 
            ? details.slice(0, 100) + "..." 
            : details
        }
    </p>

</header>


</a>